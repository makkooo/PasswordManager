package passwordmanager;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Base64;
import java.util.Scanner;

import javax.crypto.AEADBadTagException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;

/*
 * The Crypto class contains methods
 * for encrypting and decrypting 
 * password vaults.
 */
public class Crypto {
	
	/*
	 * Encryption algorithm used is
	 * the Advance Encryption Standard (AES)
	 * in Galois/Counter Mode (GCM).
	 */
	private final String ENCRYPTION_ALGO = "AES/GCM/NoPadding";
	
	/*
	 * Tag bit length of authentication tags for GCM.
	 * 128 bits tag length was used for maximum security.
	 */
	private final int TAG_BIT_LENGTH = 128;
	
	/*
	 * 12 bytes Initialization Vector (IV)
	 * generated by Java SecureRandom Class.
	 */
	private final int IV_BYTE_LENGTH = 12;
	
	/*
	 * 16 bytes salt generated by Java SecureRandom Class
	 * to provide another layer of security and prevent
	 * rainbow table/hash table attack.
	 */
	private final int SALT_BYTE_LENGTH = 16;
	
	/*
	 * Standard UTF-8 for all strings generated.
	 */
	private final Charset UTF_8 = StandardCharsets.UTF_8;
	
	/*
	 * KeyGen class used for generating keys
	 * for AES Encryption.
	 */
	private final KeyGen pbkdf2 = new KeyGen();
	
	/*
	 * Encrypts the plain text using the password as key.
	 * 
	 * @param plainText A byte array containing plain text.
	 * @param password Used as the key for encryption.
	 * 
	 * @return Base64 encoded string containing the 
	 *         cipher text, iv, and salt.
	 *         
	 * @exception NoSuchAlgorithmException if algorithm is not available.
	 * @exception InvalidKeySpecException for invalid key specification.
	 * @exception InvalidKeyException for invalid keys.
	 * @exception InvalidAlgorithmParameterException for invalid algorithm param.
	 * @exception NoSuchPaddingException if padding mechanism is not available.
	 * @exception IllegalBlockSizeException if length of data is incorrect.
	 * @exception BadPaddingException if data is padded incorrectly.
	 */
	public String encrypt(byte[] plainText, String password) {
		
		/*
		 * byte array containing the
		 * cipher text, iv, and salt.
		 */
		byte[] cipherText_iv_salt = null;
		 
		try {
			
			/*
			 * Initializes the 16 bytes salt.
			 */
			byte[] salt = pbkdf2.getRandomNonce(SALT_BYTE_LENGTH);
			
			/*
			 * Initializes the 12 bytes initialization vector.
			 */
			byte[] iv = pbkdf2.getRandomNonce(IV_BYTE_LENGTH);
			
			/*
			 * Derives the SecretKey from the password.
			 */
			SecretKey aesKey = pbkdf2.getAESKeyFromPass(password.toCharArray(), salt);
			
			/*
			 * Initializes the encryption algorithm (AES-GCM)
			 * in encyption mode.
			 */
			Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGO);
			cipher.init(Cipher.ENCRYPT_MODE, aesKey, new GCMParameterSpec(TAG_BIT_LENGTH, iv));
			
			/*
			 * Encrypts the plain text and
			 * turns it into cipher text.
			 */
			byte[] cipherText = cipher.doFinal(plainText);
			cipherText_iv_salt = ByteBuffer.allocate(iv.length + salt.length + cipherText.length)
					.put(iv)
					.put(salt)
					.put(cipherText)
					.array();
		} catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | InvalidAlgorithmParameterException | 
				 NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e) {
			e.printStackTrace();
		}
		return Base64.getEncoder().encodeToString(cipherText_iv_salt);
	}
	
	/*
	 * Decrypts the cipher text using the password as key.
	 * 
	 * @param cipherText String of cipher text.
	 * @param password Used as the key for decryption.
	 * 
	 * @return plain text.
	 * 
	 * @throw AEADBadTagException for tag mismatch.
	 *         
	 * @exception NoSuchAlgorithmException if algorithm is not available.
	 * @exception InvalidKeySpecException for invalid key specification.
	 * @exception InvalidKeyException for invalid keys.
	 * @exception InvalidAlgorithmParameterException for invalid algorithm param.
	 * @exception NoSuchPaddingException if padding mechanism is not available.
	 * @exception IllegalBlockSizeException if length of data is incorrect.
	 * @exception BadPaddingException if data is padded incorrectly.
	 */
	public String decrypt(String cipherText, String password) throws AEADBadTagException {
		
		/*
		 * byte array for the plain text.
		 */
		byte[] plainText = null;
		 
		try {
			/*
			 * Decodes the cipher text using Base64 and
			 * stores it in a byte array.
			 */
			byte[] decode = Base64.getDecoder().decode(cipherText.getBytes(UTF_8));
			
			/*
			 * Wraps the decoded byte array into a ByteBuffer
			 */
			ByteBuffer byteBuffer = ByteBuffer.wrap(decode);
			
			/*
			 * Extracts the first 12 bytes 
			 * for the initialization vector.
			 */
			byte[] iv = new byte[IV_BYTE_LENGTH];
			 	byteBuffer.get(iv);
			
			/*
			 * Extracts the next 16 bytes for the salt. 
			 */
			byte[] salt = new byte[SALT_BYTE_LENGTH];
				byteBuffer.get(salt);
				
			/*
			 * Extracts the remaining bytes for
			 * the encrypted text.
			 */
			byte[] encodedText = new byte[byteBuffer.remaining()];
				byteBuffer.get(encodedText);
			
			/*
			 * Derives the SecretKey from the password.
			*/
			SecretKey aesKey = pbkdf2.getAESKeyFromPass(password.toCharArray(), salt);
			
			/*
			 * Initializes the encryption algorithm (AES-GCM)
			 * in decryption mode.
			 */
			Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGO);
			cipher.init(Cipher.DECRYPT_MODE, aesKey, new GCMParameterSpec(TAG_BIT_LENGTH, iv));
			
			/*
			 * Decrypts the cipher text and
			 * turns it into plain text.
			 */
			plainText = cipher.doFinal(encodedText);
		} catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | InvalidAlgorithmParameterException | 
				 NoSuchPaddingException | IllegalBlockSizeException e) {
			e.printStackTrace();
		} catch (BadPaddingException bpe) {
			throw new AEADBadTagException();
		}
		return new String(plainText, UTF_8);
	 }
	
	/*
	 * Encrypts a file using encrypt() method
	 * 
	 * @exception IOException if file is a directory
	 */
	public void encryptFile(File file, String plainText, String password) {

		FileWriter writer = null;
		String encryptedText = null;
		 
		try {
			/*
			 * Encrypts the plain text.
			 */
			encryptedText = encrypt(plainText.getBytes(UTF_8), password);
			
			/*
			 * Initializes the FileWriter and 
			 * writes the encrypted text to the file.
			 */
			writer = new FileWriter(file);
			writer.write(encryptedText);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Decrypts a file using decrypt() method
	 * 
	 * @return String of decrypted data
	 * 
	 * @throw AEADBadTagExceptio for tag mismatch.
	 * 
	 * @exception IOException if file is a directory
	 * @exception BadPaddingException if data is padded incorrectly.
	 */
	public String decryptFile(File encryptedFile, String password) throws AEADBadTagException {
		 
		Scanner scanner = null;
		String encryptedText, vaultContent;
		 
		try {
			/*
			 * Scan the encrypted file.
			 */
			scanner = new Scanner(encryptedFile);
			encryptedText = scanner.next();
			
			/*
			 * Decrypts encrypted file.
			 */
			vaultContent = decrypt(encryptedText, password);
		} catch (IOException ioe ) { 
			throw new NullPointerException();
		} catch (BadPaddingException bpe) {
			throw new AEADBadTagException();
		} finally {
			scanner.close();
		}
		return vaultContent;
	}
}
	
	//For quick testing purposes only
	/*
	 public static void main(String[] args) throws Exception {
		 
	 	 File file = new File("C:\\Users\\Mark\\Desktop\\vaultTest.jpdb");
		 Crypto aes = new Crypto();
		 String plainText = "www.foo.com\tuser@foo\tpass@foo"; 
		 String password = "Password123!";
		 
		 //encrypts file
		 String encryptedText = aes.encrypt(plainText.getBytes(UTF_8), password);
		 FileWriter writer = new FileWriter(file);
		 writer.write(encryptedText);
		 writer.close();
		 
		 //decrypts file
		 System.out.println(aes.decryptFile(file, password));
	 }
}*/